@using BlazorConduit.Client.Models.Articles.Dtos
@using BlazorConduit.Client.Models.Profiles
@using BlazorConduit.Client.Services

@inject StateFacade StateFacade

@if (Articles is null && IsLoading)
{
    <span>Loading articles...</span>
}
else if (!(Articles is null) && Articles.Any())
{
    foreach (var article in Articles)
    {
        <div class="article-preview">
            <div class="article-meta">
                @if (!(article.Author is null))
                {
                    <a href="@GetAuthorProfileUri(article.Author)"><img src="@article.Author.Image" /></a>
                    <div class="info">
                        <a href="@GetAuthorProfileUri(article.Author)" class="author">@article.Author.Username</a>
                        <span class="date">@article.CreatedAt.ToShortDateString()</span>
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(article.Slug))
                {
                    if (article.Favorited)
                    {
                        <button @onclick="() => StateFacade.UnfavoritePostFromArticle(article.Slug)" class="btn btn-primary btn-sm pull-xs-right">
                            <i class="ion-heart"></i> @article.FavoritesCount
                        </button>
                    }
                    else
                    {
                        <button @onclick="() => StateFacade.FavoritePostFromArticle(article.Slug)" class="btn btn-outline-primary btn-sm pull-xs-right">
                            <i class="ion-heart"></i> @article.FavoritesCount
                        </button>
                    }
                }
            </div>
            <a href="@GetArticleUri(article)" class="preview-link">
                <h1>@article.Title</h1>
                <p>@article.Description</p>
                <span>Read more...</span>
                @if (!(article.TagList is null) && article.TagList.Any())
                {
                    <ul class="tag-list">
                        @foreach (var tag in article.TagList)
                        {
                            <li class="tag-default tag-pill tag-outline">@tag</li>
                        }
                    </ul>
                }
            </a>
        </div>
    }
}
else
{
    <span>No articles are here... yet.</span>
}

@code {

    [Parameter]
    public IEnumerable<ArticleDto>? Articles { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public ArticleDto? MostRecentArticleInteraction { get; set; }

    protected override void OnParametersSet()
    {
        // Update the last favorited/unfavorited article in the input list, if available
        if (!(Articles is null) && !(MostRecentArticleInteraction is null) && Articles.Any())
        {

            var existingArticle = Articles
                .FirstOrDefault(a => string.Equals(a.Slug, MostRecentArticleInteraction.Slug, StringComparison.CurrentCultureIgnoreCase));

            if (existingArticle is null)
            {
                return;
            }

            // Set the favorited state, depending on interaction
            existingArticle.Favorited = MostRecentArticleInteraction.Favorited;
            existingArticle.FavoritesCount = MostRecentArticleInteraction.FavoritesCount;

            // Re-render the article list
            StateHasChanged();
        }

    }

    private string GetAuthorProfileUri(UserProfileDto profile) =>
        $"/profile/{profile.Username}";

    private string GetArticleUri(ArticleDto article) =>
        $"/article/{article.Slug}";

}
