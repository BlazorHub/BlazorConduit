@page "/article/{articleSlug}"

@using BlazorConduit.Client.Models.Articles.Dtos
@using BlazorConduit.Client.Services 
@using BlazorConduit.Client.Store.State 
@using Fluxor

@inject IState<ArticleState> ArticleState
@inject IState<UserState> UserState
@inject StateFacade StateFacade
@inject NavigationManager Navigation

@if (!(article is null) && !(article.Author is null))
{
    <div class="article-page">

        <div class="banner">
            <div class="container">

                <h1>@article.Title</h1>

                <div class="article-meta">
                    <a @onclick="() => StateFacade.GetUserProfile(string.IsNullOrWhiteSpace(article.Author.Username) ? string.Empty : article.Author.Username)"><img src="@article.Author.Image" /></a>
                    <div class="info">
                        <a href="" class="author">@article.Author.Username</a>
                        <span class="date">@article.CreatedAt.ToShortDateString()</span>
                    </div>

                    @if (isCurrentUser)
                    {
                        <button class="btn btn-sm btn-outline-secondary action-btn">
                            <i class="ion-gear-a"></i>
                            &nbsp;
                            Edit Profile Settings
                        </button>
                    }
                    else if (!string.IsNullOrWhiteSpace(article.Author.Username))
                    {
                        if (isFollowing)
                        {
                            <button @onclick="() => StateFacade.UnfollowUserFromArticle(article.Author.Username)" class="btn btn-sm btn-secondary">
                                <i class="ion-minus-round"></i>
                                &nbsp;
                                Unfollow @article.Author.Username
                            </button>
                        }
                        else
                        {
                            <button @onclick="() => StateFacade.FollowUserFromArticle(article.Author.Username)" class="btn btn-sm btn-outline-secondary">
                                <i class="ion-plus-round"></i>
                                &nbsp;
                                Follow @article.Author.Username
                            </button>
                        }
                    }

                    &nbsp;&nbsp;

                    @* Favorite button state markup *@
                    @if (article.Favorited)
                    {
                        <button @onclick="() => StateFacade.UnfavoritePostFromArticle(article.Slug!)" class="btn btn-sm btn-primary">
                            <i class="ion-heart"></i>
                            &nbsp;
                            Unfavorite Post <span class="counter">@article.FavoritesCount</span>
                        </button>
                    }
                    else
                    {
                        <button @onclick="() => StateFacade.FavoritePostFromArticle(article.Slug!)" class="btn btn-sm btn-outline-primary">
                            <i class="ion-heart"></i>
                            &nbsp;
                            Favorite Post <span class="counter">@article.FavoritesCount</span>
                        </button>
                    }
                </div>

            </div>
        </div>

        <div class="container page">

            <div class="row article-content">
                <div class="col-md-12">
                    @article.Body
                </div>
            </div>

            <hr />

            <div class="article-actions">
                <div class="article-meta">
                    <a @onclick="() => StateFacade.GetUserProfile(string.IsNullOrWhiteSpace(article.Author.Username) ? string.Empty : article.Author.Username)"><img src="@article.Author.Image" /></a>
                    <div class="info">
                        <a @onclick="() => StateFacade.GetUserProfile(string.IsNullOrWhiteSpace(article.Author.Username) ? string.Empty : article.Author.Username)" class="author">@article.Author.Username</a>
                        <span class="date">@article.CreatedAt.ToShortTimeString()</span>
                    </div>

                    @if (isCurrentUser)
                    {
                        <button class="btn btn-sm btn-outline-secondary action-btn">
                            <i class="ion-gear-a"></i>
                            &nbsp;
                            Edit Profile Settings
                        </button>
                    }
                    else if (!string.IsNullOrWhiteSpace(article.Author.Username))
                    {
                        if (isFollowing)
                        {
                            <button @onclick="() => StateFacade.UnfollowUserFromArticle(article.Author.Username)" class="btn btn-sm btn-secondary">
                                <i class="ion-minus-round"></i>
                                &nbsp;
                                Unfollow @article.Author.Username
                            </button>
                        }
                        else
                        {
                            <button @onclick="() => StateFacade.FollowUserFromArticle(article.Author.Username)" class="btn btn-sm btn-outline-secondary">
                                <i class="ion-plus-round"></i>
                                &nbsp;
                                Follow @article.Author.Username
                            </button>
                        }
                    }

                    &nbsp;&nbsp;

                    @* Favorite button state markup *@
                    @if (article.Favorited)
                    {
                        <button @onclick="() => StateFacade.UnfavoritePostFromArticle(article.Slug!)" class="btn btn-sm btn-primary">
                            <i class="ion-heart"></i>
                            &nbsp;
                            Unfavorite Post <span class="counter">@article.FavoritesCount</span>
                        </button>
                    }
                    else
                    {
                        <button @onclick="() => StateFacade.FavoritePostFromArticle(article.Slug!)" class="btn btn-sm btn-outline-primary">
                            <i class="ion-heart"></i>
                            &nbsp;
                            Favorite Post <span class="counter">@article.FavoritesCount</span>
                        </button>
                    }

                </div>
            </div>

            <div class="row">

                <div class="col-xs-12 col-md-8 offset-md-2">

                    <form class="card comment-form">
                        <div class="card-block">
                            <textarea class="form-control" placeholder="Write a comment..." rows="3"></textarea>
                        </div>
                        <div class="card-footer">
                            <img src="http://i.imgur.com/Qr71crq.jpg" class="comment-author-img" />
                            <button class="btn btn-sm btn-primary">
                                Post Comment
                            </button>
                        </div>
                    </form>

                    <div class="card">
                        <div class="card-block">
                            <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                        </div>
                        <div class="card-footer">
                            <a href="" class="comment-author">
                                <img src="http://i.imgur.com/Qr71crq.jpg" class="comment-author-img" />
                            </a>
                            &nbsp;
                            <a href="" class="comment-author">Jacob Schmidt</a>
                            <span class="date-posted">Dec 29th</span>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-block">
                            <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
                        </div>
                        <div class="card-footer">
                            <a href="" class="comment-author">
                                <img src="http://i.imgur.com/Qr71crq.jpg" class="comment-author-img" />
                            </a>
                            &nbsp;
                            <a href="" class="comment-author">Jacob Schmidt</a>
                            <span class="date-posted">Dec 29th</span>
                            <span class="mod-options">
                                <i class="ion-edit"></i>
                                <i class="ion-trash-a"></i>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private ArticleDto? article;

    private bool isCurrentUser;

    private bool isFollowing;

    [Parameter]
    public string? ArticleSlug { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ArticleState.StateChanged += OnArticleLoaded;

        if (string.IsNullOrWhiteSpace(ArticleSlug))
        {
            // Navigate back to home if no slug is found
            Navigation.NavigateTo("/");
            return;
        }

        // Load the article from the store, if the slugs match
        if (string.Equals(ArticleSlug, ArticleState.Value.CurrentArticle?.Slug))
        {
            article = ArticleState.Value.CurrentArticle;
        }
        else
        {
            // Load the article by slug
            StateFacade.RetrieveArticle(ArticleSlug);
        }
    }

    private bool IsCurrentUserProfile(ArticleState state)
    {
        // No profile or current user, default to false
        if (state.CurrentArticle is null || state.CurrentArticle.Author is null || UserState.Value.CurrentUser is null)
        {
            return false;
        }

        // No profile or user username, default to false
        if (string.IsNullOrWhiteSpace(state.CurrentArticle.Author.Username) || string.IsNullOrWhiteSpace(UserState.Value.CurrentUser.Username))
        {
            return false;
        }

        return string.Equals(state.CurrentArticle.Author.Username, UserState.Value.CurrentUser.Username);
    }

    private void OnArticleLoaded(object sender, ArticleState state)
    {
        article = state.CurrentArticle;
        isCurrentUser = IsCurrentUserProfile(state);

        if (state.IsFollowingUser.HasValue)
        {
            isFollowing = state.IsFollowingUser.Value;
        }
        else if (!(state.CurrentArticle is null) && !(state.CurrentArticle.Author is null))
        {
            isFollowing = state.CurrentArticle.Author.Following;
        }
        else
        {
            isFollowing = false;
        }

        StateHasChanged();
    }

}