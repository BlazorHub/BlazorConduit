@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@page "/"

@using BlazorConduit.Client.Models.Common
@using BlazorConduit.Client.Pages.Article
@using BlazorConduit.Client.Services
@using BlazorConduit.Client.Store.State
@using Fluxor

@inject StateFacade StateFacade
@inject IState<ArticleState> ArticleState
@inject IState<UserState> UserState

<div class="home-page">

    <div class="banner">
        <div class="container">
            <h1 class="logo-font">conduit</h1>
            <p>A place to share your knowledge.</p>
        </div>
    </div>

    <div class="container page">
        <div class="row">

            <div class="col-md-9">
                <div class="feed-toggle">
                    <ul class="nav nav-pills outline-active">
                        @if (feedContext == UserProfileInteractionContext.Feed && UserState.Value.IsAuthenticated)
                        {
                            <li class="nav-item" style="cursor: pointer;">
                                <a class="nav-link active">Your Feed</a>
                            </li>
                            <li class="nav-item" style="cursor: pointer;">
                                <a class="nav-link" @onclick="() => OnFeedArticleClicked(UserProfileInteractionContext.Global)">Favorited Articles</a>
                            </li>
                        }
                        else if (UserState.Value.IsAuthenticated)
                        {
                            <li class="nav-item" style="cursor: pointer;">
                                <a class="nav-link" @onclick="() => OnFeedArticleClicked(UserProfileInteractionContext.Feed)">Your Feed</a>
                            </li>
                            <li class="nav-item" style="cursor: pointer;">
                                <a class="nav-link active">Global Feed</a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item" style="cursor: pointer;">
                                <a class="nav-link" @onclick="() => OnFeedArticleClicked(UserProfileInteractionContext.Global)">Favorited Articles</a>
                            </li>
                        }
                    </ul>
                </div>

                <ArticleList Articles="ArticleState.Value.CurrentArticleList"
                             MostRecentArticleInteraction="ArticleState.Value.CurrentArticle"
                             IsLoading="ArticleState.Value.IsLoading" />

            </div>

            <div class="col-md-3">
                <div class="sidebar">
                    <p>Popular Tags</p>

                    <div class="tag-list">
                        <a href="" class="tag-pill tag-default">programming</a>
                        <a href="" class="tag-pill tag-default">javascript</a>
                        <a href="" class="tag-pill tag-default">emberjs</a>
                        <a href="" class="tag-pill tag-default">angularjs</a>
                        <a href="" class="tag-pill tag-default">react</a>
                        <a href="
                           " class="tag-pill tag-default">mean</a>
                        <a href="" class="tag-pill tag-default">node</a>
                        <a href="" class="tag-pill tag-default">rails</a>
                    </div>
                </div>
            </div>

        </div>
    </div>

</div>

@code {

    private UserProfileInteractionContext feedContext;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Load the global article feed
        feedContext = UserProfileInteractionContext.Global;
        StateFacade.GetArticles(limit: 10, offset: 0);
    }

    private void OnFeedArticleClicked(UserProfileInteractionContext context)
    {
        switch (context)
        {
            case UserProfileInteractionContext.Global:
                StateFacade.GetArticles(limit: 10, offset: 0);
                feedContext = UserProfileInteractionContext.Global;
                break;
            default:
                StateFacade.GetFeed(limit: 10, offset: 0);
                feedContext = UserProfileInteractionContext.Feed;
                break;
        }
    }

}
