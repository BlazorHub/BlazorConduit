@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@page "/profile/{username}"

@using BlazorConduit.Client.Models.Profile
@using BlazorConduit.Client.Services
@using BlazorConduit.Client.Store.State
@using Fluxor 

@inject IState<ProfileState> State
@inject StateFacade StateFacade

@if (!(userProfile is null))
{
    <div class="profile-page">

        <div class="user-info">
            <div class="container">

                @* Header stuff *@
                <div class="row">
                    <div class="col-xs-12 col-md-10 offset-md-1">
                        <img src="@userProfile.Image" class="user-img" />
                        <h4>@userProfile.Username</h4>
                        <p>@userProfile.Bio</p>
                        <button class="btn btn-sm btn-outline-secondary action-btn">
                            <i class="ion-plus-round"></i>
                            &nbsp;
                            Follow @userProfile.Username
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">

                <div class="col-xs-12 col-md-10 offset-md-1">
                    <div class="articles-toggle">
                        <ul class="nav nav-pills outline-active">
                            <li class="nav-item">
                                <a class="nav-link active" href="">My Articles</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="">Favorited Articles</a>
                            </li>
                        </ul>
                    </div>

                    <div class="article-preview">
                        <div class="article-meta">
                            <a href=""><img src="http://i.imgur.com/Qr71crq.jpg" /></a>
                            <div class="info">
                                <a href="" class="author">Eric Simons</a>
                                <span class="date">January 20th</span>
                            </div>
                            <button class="btn btn-outline-primary btn-sm pull-xs-right">
                                <i class="ion-heart"></i> 29
                            </button>
                        </div>
                        <a href="" class="preview-link">
                            <h1>How to build webapps that scale</h1>
                            <p>This is the description for the post.</p>
                            <span>Read more...</span>
                        </a>
                    </div>

                    <div class="article-preview">
                        <div class="article-meta">
                            <a href=""><img src="http://i.imgur.com/N4VcUeJ.jpg" /></a>
                            <div class="info">
                                <a href="" class="author">Albert Pai</a>
                                <span class="date">January 20th</span>
                            </div>
                            <button class="btn btn-outline-primary btn-sm pull-xs-right">
                                <i class="ion-heart"></i> 32
                            </button>
                        </div>
                        <a href="" class="preview-link">
                            <h1>The song you won't ever stop singing. No matter how hard you try.</h1>
                            <p>This is the description for the post.</p>
                            <span>Read more...</span>
                            <ul class="tag-list">
                                <li class="tag-default tag-pill tag-outline">Music</li>
                                <li class="tag-default tag-pill tag-outline">Song</li>
                            </ul>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {        

    private UserProfileDto? userProfile;

    [Parameter]
    public string? Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        State.StateChanged += RefreshProfileState;

        // Load the current profile if none is available and a username was passed in (i.e. user refreshed)
        if (!string.IsNullOrWhiteSpace(Username) && State.Value.CurrentProfile is null)
        {
            StateFacade.GetUserProfile(Username);
        }
        else if (State.Value.HasCachedProfile)
        {
            userProfile = State.Value.CurrentProfile;
        }
    }

    private void RefreshProfileState(object sender, ProfileState state)
    {
        userProfile = state.CurrentProfile;

        StateHasChanged();
    }

}